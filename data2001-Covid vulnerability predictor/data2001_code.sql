set search_path to vulnerabilityscore, public;

DROP TABLE IF EXISTS vulnerabilityscore.areas;
CREATE TABLE vulnerabilityscore.areas(
                    area_id char(9) primary key,
                    area_name varchar(50),
					parent_id varchar(5) not null);

DROP TABLE IF EXISTS vulnerabilityscore.population;
CREATE TABLE vulnerabilityscore.population(
                     area_id CHAR(9) primary key,
                     ages_0_4 FLOAT,
                     ages_5_9 FLOAT,
                     ages_10_14 FLOAT,
                     ages_15_19 FLOAT,
                     ages_20_24 FLOAT,
                     ages_25_29 FLOAT,
                     ages_30_34 FLOAT,
                     ages_35_39 FLOAT,
                     ages_40_44 FLOAT,
                     ages_45_49 FLOAT,
                     ages_50_54 FLOAT,
                     ages_55_59 FLOAT,
                     ages_60_64 FLOAT,
                     ages_65_69 FLOAT,
                     ages_70_74 FLOAT,
                     ages_75_79 FLOAT,
                     ages_80_84 FLOAT,
                     ages_85_and_over FLOAT,
                     total_persons INTEGER,
                     females INTEGER,
                     males INTEGER);

DROP TABLE IF EXISTS vulnerabilityscore.neighbourhoods;
CREATE TABLE vulnerabilityscore.neighbourhoods(
                    area_id char(9) primary key  references vulnerabilityscore.areas(area_id),
                    land_area float,
                    population integer,
                    number_of_dwellings integer,
                    number_of_businesses integer,
                    geom GEOMETRY(MULTIPOLYGON,4283) not null);
					
DROP TABLE IF EXISTS vulnerabilityscore.schools;
CREATE TABLE vulnerabilityscore.schools(
                     school_code char(4) primary key,
                     school_name Varchar(100),
                     head_count integer,
                     longitude float,
                     latitude float,
                     geom GEOMETRY(POINT,4326) not null);
									

DROP TABLE IF EXISTS vulnerabilityscore.postcodes;
CREATE TABLE vulnerabilityscore.postcodes(
                     postcode char(4) primary key ,
                     longitude float,
                     latitude float,
                     geom GEOMETRY(POINT,4283) not null);			
					

DROP TABLE IF EXISTS vulnerabilityscore.gps;
CREATE TABLE vulnerabilityscore.gps(
                     id varchar(4) primary key,
                     name Varchar(100),
                     postcode char(4) references vulnerabilityscore.postcodes(postcode),
                     longitude float,
                     latitude float,
                     geom GEOMETRY(POINT,4283) not NULL);
					 
DROP TABLE IF EXISTS vulnerabilityscore.hospitals;
CREATE TABLE vulnerabilityscore.hospitals(
                     id varchar(4) primary key,
                     name Varchar(100),
                     num_beds float,
                     postcode char(4) not null references vulnerabilityscore.postcodes(postcode),
                     longitude float,
                     latitude float,
                     geom GEOMETRY(POINT,4283) not NULL);
					  
					 
DROP TABLE IF EXISTS vulnerabilityscore.covid_tests;
create table vulnerabilityscore.covid_tests(
					test_id varchar(1000000) primary key,
					test_date date,
					postcode char(4) not null ,
					result varchar(20) not null);
					 

ALTER TABLE vulnerabilityscore.schools
 ALTER COLUMN geom TYPE geometry(Point,4283) 
  USING ST_Transform(geom,4283);


create index covid_idx on vulnerabilityscore.covid_tests(postcode);
create index covid_idxr on vulnerabilityscore.covid_tests(result);
CREATE INDEX neighbour_idx ON vulnerabilityscore.neighbourhoods USING GIST (geom);
CREATE INDEX gps_idx ON vulnerabilityscore.gps USING GIST (geom);
CREATE INDEX hospitals_idx ON vulnerabilityscore.hospitals USING GIST (geom);
CREATE INDEX schools_idx ON vulnerabilityscore.schools USING GIST (geom);
CREATE INDEX postcodes_idx ON vulnerabilityscore.postcodes USING GIST (geom);

--these are the psql code used to read in areas, populations and covid tests from jupyter notebook
--\copy vulnerabilityscore.population from 'Data2001 project/popstats_perc.csv' csv header;
--\copy vulnerabilityscore.areas from 'Data2001 project/StatisticalAreas.csv' csv header;
--\copy vulnerabilityscore.covid_tests from 'Data2001 project/covid.csv' csv header;

drop view if exists neighs_pop;
create view neighs_pop as
select * 
from vulnerabilityscore.neighbourhoods natural join vulnerabilityscore.population

drop view if exists covid;
create view covid as
select * 
from vulnerabilityscore.covid_tests 
natural join vulnerabilityscore.postcodes


drop view if exists area;
create view area as
select area_id, count(test_id) as "tests"
	from neighs_pop a left outer join covid b on ST_contains(a.geom, b.geom)
	group by area_id;

drop view if exists areac;
create view areac as
select area_id, count(test_id) as "cases"
	from neighs_pop a left outer join covid b on ST_contains(a.geom, b.geom)
	where b.result = 'Case - Confirmed'
	group by area_id;

drop view if exists areacase;
create view areacase as
	select area.area_id, tests, case
		when cases isnull then 0
		else cases 
		end 
	from area left outer join areac on area.area_id = areac.area_id;

drop view if exists areaschool;
create view areaschool as
select a.area_id, 
		case when sum(b.head_count) isnull then 0
		else sum(b.head_count)
		end as head_count
	from vulnerabilityscore.neighbourhoods a left outer join vulnerabilityscore.schools b
	on ST_contains(a.geom, b.geom)
	group by area_id

drop view if exists publichos;
create view publichos as
select area_id, count(name) as pubhos, sum(nullif) as pubbeds
	from nullhos
	where nullif is not null and lower(name) not similar to '%private%'
	group by area_id;

drop view if exists privhos;
create view privhos as
select area_id, count(name) as privhos
	from nullhos
	where nullif is not null and lower(name) similar to '%private%'
	group by area_id;

drop view if exists areahos0;
create view areahos0 as
select *
	from publichos a natural full outer join privhos b;

drop view if exists areahos;
create view areahos as
select a.area_id, 
	case when b.pubhos isnull then 0
		else b.pubhos
		end,
	case when b.pubbeds isnull then 0
		else b.pubbeds
		end,
	case when b.privhos isnull then 0
		else b.privhos
		end
	from vulnerabilityscore.neighbourhoods a natural left outer join areahos0 b;


drop view if exists gps;
create view gps as
select a.area_id, count(b.name) as gps
	from vulnerabilityscore.neighbourhoods a left outer join vulnerabilityscore.gps b
	on ST_contains(a.geom, b.geom)
	group by a.area_id

drop view if exists senior;
create view senior as 
select a.area_id, ages_70_74 + ages_75_79 + ages_80_84 + ages_85_and_over as senior
	from vulnerabilityscore.neighbourhoods a natural join vulnerabilityscore.population b;


drop view if exists fin;
create view fin as
select *
from vulnerabilityscore.neighbourhoods natural join areacase natural join areaschool natural join areahos natural join gps natural join senior;
